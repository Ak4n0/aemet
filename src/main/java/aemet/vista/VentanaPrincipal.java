package aemet.vista;

import aemet.modelo.Control;
import aemet.modelo.entidades.Estacion;
import aemet.modelo.entidades.Medicion;
import aemet.modelo.entidades.Provincia;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 * Ventana GUI
 * @author Miquel A. Fuster
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    // Miembors auxiliares
    /**
     * Búffer que contiene las estaciones según provincia seleccionada
     */
    private Collection<Estacion> listaEstaciones;
    
    /**
     * Búffer que contiene las mediciones de una estación seleccionada
     */
    private Collection<Medicion> listaMediciones;
    
    /**
     * Búffer que contiene un tipo de medición por fechas
     */
    private Collection<Medicion> medicionesActuales;
    
    /**
     * Obtiene un objeto Estacion según su nombre desde el búffer listaEstaciones.
     * @param nombre Nombre identificativo de la estación.
     * @return Objeto Estacion si ha sido encontrado o null en caso contrario.
     */
    private Estacion obtenerEstacionConNombre(String nombre) {
        Estacion estacion = null;
        for(Estacion e: listaEstaciones) {
            if(nombre.equals((String)e.getNombre())) {
                estacion = e;
                break;
            }
        }
        return estacion;
    }
    
    /**
     * Obtiene la fecha mas antigua del búffer listaMediciones.
     * @return Objeto Date con la fecha mas antigua.
     */
    private Date obtenerFechaInicial() {
        Date fecha = listaMediciones.toArray(new Medicion[0])[0].getFechaHora();
        for(Medicion medicion: listaMediciones) {
            if(fecha.after(medicion.getFechaHora()))
                fecha = medicion.getFechaHora();
        }
        return fecha;
    }
    
    /**
     * Obtiene la fecha mas moderna del búffer listaMediciones
     * @return Objeto Date con la fecha mas moderna.
     */
    private Date obtenerFechaFinal() {
        Date fecha = listaMediciones.toArray(new Medicion[0])[0].getFechaHora();
        for(Medicion m: listaMediciones) {
            if(fecha.before(m.getFechaHora()))
                fecha = m.getFechaHora();
        }
        return fecha;
    }
    
    /**
     * Formate una cadena con una posición tipo GGMMSSD a GGº MM' SS" D
     * @param posicion String con una geoposición sin formatear.
     * @return String con una geoposición en formato de lectura huamana.
     */
    private String formatearPosicion(String posicion) {
        return posicion.substring(0, 2) + "º " 
                + posicion.substring(2, 4) + "' "
                + posicion.substring(4, 6) + "\" "
                + posicion.charAt(6);
    }
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        
        // Inicializa una gráfica vacía para dar continuidad con el programa en uso
        Grafica grafica = new Grafica();
        panelContenedorGrafica.add(grafica.getPanel());
        
        // Obtener Lista de Provincias
        Collection<Provincia> listaDeProvincias = Control.obtenerListaProvincias();
        
        //  LLenar el combobox de provincias
        for(Provincia provincia: listaDeProvincias) {
            cmbProvincia.addItem(provincia.getNombre());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTabla = new javax.swing.JTabbedPane();
        panelScroll = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        panelGrafica = new javax.swing.JPanel();
        panelSeleccion = new javax.swing.JPanel();
        lblDatosGrafica = new javax.swing.JLabel();
        cmbDatosGrafica = new javax.swing.JComboBox<>();
        panelContenedorGrafica = new javax.swing.JPanel();
        panelSuperior = new javax.swing.JPanel();
        lblProvincia = new javax.swing.JLabel();
        cmbProvincia = new javax.swing.JComboBox<>();
        lblEstacion = new javax.swing.JLabel();
        cmbEstacion = new javax.swing.JComboBox<>();
        lblFechaInicial = new javax.swing.JLabel();
        lblFechaFinal = new javax.swing.JLabel();
        dtcFechaInicial = new com.toedter.calendar.JDateChooser();
        dtcFechaFinal = new com.toedter.calendar.JDateChooser();
        btnBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Datos AEMET");
        setMinimumSize(new java.awt.Dimension(985, 600));
        setPreferredSize(new java.awt.Dimension(1300, 600));

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Fecha/Hora", "Velocidad media del viento", "Máxima velocidad del viento", "Dirección del viento", "Precipitación", "Humedad relativa", "Presión barométrica", "Insolación", "Temperatura medial", "Máxima temperatura", "Mínima temperatura", "Nieve, grosor de capa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResultados.setMinimumSize(panelScroll.getMaximumSize());
        panelScroll.setViewportView(tablaResultados);

        panelTabla.addTab("Tabla de resultados", panelScroll);

        lblDatosGrafica.setText("Datos a visualizar");

        cmbDatosGrafica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione los datos a visualizar..." }));
        cmbDatosGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDatosGraficaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSeleccionLayout = new javax.swing.GroupLayout(panelSeleccion);
        panelSeleccion.setLayout(panelSeleccionLayout);
        panelSeleccionLayout.setHorizontalGroup(
            panelSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSeleccionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDatosGrafica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbDatosGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(662, Short.MAX_VALUE))
        );
        panelSeleccionLayout.setVerticalGroup(
            panelSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSeleccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDatosGrafica)
                    .addComponent(cmbDatosGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelContenedorGrafica.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout panelGraficaLayout = new javax.swing.GroupLayout(panelGrafica);
        panelGrafica.setLayout(panelGraficaLayout);
        panelGraficaLayout.setHorizontalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraficaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelContenedorGrafica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelGraficaLayout.setVerticalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSeleccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContenedorGrafica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelTabla.addTab("Gráfica", panelGrafica);

        lblProvincia.setText("Provincia");

        cmbProvincia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elija una provincia..." }));
        cmbProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProvinciaActionPerformed(evt);
            }
        });

        lblEstacion.setText("Estacion");

        cmbEstacion.setEnabled(false);
        cmbEstacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEstacionActionPerformed(evt);
            }
        });
        cmbEstacion.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbEstacionPropertyChange(evt);
            }
        });

        lblFechaInicial.setText("Fecha inicial");

        lblFechaFinal.setText("Fecha final");

        dtcFechaInicial.setEnabled(false);
        dtcFechaInicial.getDateEditor().addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtcFechaInicialDateEditorPropertyChange(evt);
            }
        });

        dtcFechaFinal.setEnabled(false);
        dtcFechaFinal.getDateEditor().addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtcFechaFinalDateEditorPropertyChange(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.setEnabled(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSuperiorLayout = new javax.swing.GroupLayout(panelSuperior);
        panelSuperior.setLayout(panelSuperiorLayout);
        panelSuperiorLayout.setHorizontalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFechaInicial)
                    .addComponent(lblProvincia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtcFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEstacion)
                    .addComponent(lblFechaFinal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtcFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEstacion, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSuperiorLayout.setVerticalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbEstacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEstacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFechaFinal)
                            .addComponent(dtcFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProvincia)
                            .addComponent(cmbProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFechaInicial)
                            .addComponent(dtcFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelTabla))
                    .addComponent(panelSuperior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTabla)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProvinciaActionPerformed
        // Desactivando los dos siguientes elementos se asegura que, mientras
        // se configura el elemento, el usuario no pueda realizar acciones 'ilegales'
        cmbEstacion.setEnabled(false);
        btnBuscar.setEnabled(false);
        // Sólo debe trabajar si hay algo útil seleccionado, a partir de la pos. 1.
        if(cmbProvincia.getSelectedIndex() != 0) {
            // Vaciado de los datos del combo box y regreso al estado básico
            cmbEstacion.removeAllItems();
            cmbEstacion.addItem("Seleccione una estacion...");
            // Carga del búffer listaEstaciones según la provincia seleccionada
            listaEstaciones = Control.obtenerListaEstaciones(Control.obtenerProvincia((String)cmbProvincia.getSelectedItem()));
            // Llenado del combo box según con los nuevos datos
            for(Estacion estacion: listaEstaciones) {
                cmbEstacion.addItem(estacion.getNombre());
            }
            // Activacion del combo box de estaciones
            cmbEstacion.setEnabled(true);
        }
    }//GEN-LAST:event_cmbProvinciaActionPerformed

    private void cmbEstacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEstacionActionPerformed
        // El combo box de provincias cambia los datos de éste, y en consecuencia este método se activa.
        // Si esto no se controla puede haber comportamientos extraños.
        // De esta forma controlaremos los cambios si está activo el elemento.
        if(cmbEstacion.isEnabled()) {
            // Trabajo a realizar cuando el índice es diferente a 0, es decir, cuando el usuario ha elegido
            // una estación.
            if(cmbEstacion.getSelectedIndex() != 0) {
                // Se obtiene una estación desde el búffer de estaciones a partir del nombre seleccionado
                // en el combo box.
                Estacion estacion = obtenerEstacionConNombre((String)cmbEstacion.getSelectedItem());
                // Si la estación no existe el método regresa sin realizar más trabajos.
                if(estacion == null)
                    return;
                // Se genera un tooltip para que, cuando el usuario pase el ratón sobre el elemento,
                // de información sobre la geoposición de la estación seleccionada.
                cmbEstacion.setToolTipText("Lat. " + formatearPosicion(estacion.getLatitud())
                                            + ", Lon. " + formatearPosicion(estacion.getLongitud())
                                            + ", Alt. " + estacion.getAltitud() + "m");
                // Carga el búffer listaMediciones con todas las mediciones que tiene la BBDD de esa estación
                listaMediciones = Control.obtenerMedicionesDeEstacion(estacion);
                // Si no tiene ninguna la el método regresa sin realizar más trabajos.
                if(listaMediciones.isEmpty())
                    return;
                // Se configuran los elementos de calendario para que el usuario pueda elegir sobre
                // que rango de fechas quiere realizar la búsqueda.
                // Obtención de la fecha más antigua de las mediciones adquiridas
                Date fechaInicial = obtenerFechaInicial();
                // Obtención de la fecha más moderna de las mediciones adquiridas
                Date fechaFinal = obtenerFechaFinal();
                // El elemento de fecha más moderna tendrá el rango de fechaInicial hasta fechaFinal
                dtcFechaInicial.setSelectableDateRange(fechaInicial, fechaFinal);
                // Se le da la fechaInicial cómo la seleccionada
                dtcFechaInicial.setDate(fechaInicial);
                // Mismo ramo para fechaFinal
                dtcFechaFinal.setSelectableDateRange(fechaInicial, fechaFinal);
                // Cómo fecha se le da la fechaFinal cómo la seleccionada
                dtcFechaFinal.setDate(fechaFinal);
                // Configurados los controles de fecha se habilitan
                dtcFechaInicial.setEnabled(true);
                dtcFechaFinal.setEnabled(true);
                // De igual forma, una vez obtenidos todos los datos para la selección y muestra de
                // mediciones se habilita el botón.
                btnBuscar.setEnabled(true);
            }
            else {
                // Si el elemento no tiene una selección útil se deshabilitan los elementos que
                // dependen de él.
                cmbEstacion.setToolTipText(null);
                dtcFechaInicial.setEnabled(false);
                dtcFechaFinal.setEnabled(false);
                btnBuscar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_cmbEstacionActionPerformed

    private void cmbEstacionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbEstacionPropertyChange
        // Si se desactiva el combo box estacion también se deben desactivar las fechas
        // que dependen de él
        if(cmbEstacion.isEnabled() == false) {
            dtcFechaInicial.setEnabled(false);
            dtcFechaFinal.setEnabled(false);
        }
    }//GEN-LAST:event_cmbEstacionPropertyChange

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // Prepara la tabla para cargarle los datos
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaResultados.getModel();
        /* Array auxiliar para cargar los datos del combo box de la gráfica
         * evitando los elementos duplicados.
         * Posicion - Significado
         * 0 - velocidad media del viento
         * 1 - velocidad máxima del viento
         * 2 - dirección del viento
         * 3 - precipitación
         * 4 - humedad relativa
         * 5 - presión barométrica
         * 6 - insolación
         * 7 - temperatura media
         * 8 - temperatura máxima
         * 9 - temperatura mínima
         * 10 - grosor de nieve
         */
        boolean[] datosTabla = new boolean[11];
        // Borra los datos de la tabla
        modeloTabla.setRowCount(0);
        // Límpia el buffer medicionesActuales
        medicionesActuales = new ArrayList<>();
        for(Medicion medicion: listaMediciones) {
            // Para incluir la fecha final, marcada por el elemento en la UI, se debe sumar un día mas
            // en caso contrario no se incluiría toda esa fecha. Esto sería un problema si se quisiera
            // conseguir sólo las lecturas del mismo día, donde fecha inicial y fecha final fueran las
            // mismas.
            // El objeto Calendar permite realizar operaciones sobre fechas
            Calendar c = Calendar.getInstance();
            c.setTime(dtcFechaFinal.getDate());
            c.set(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
            c.add(Calendar.DATE, 1);
            Date diaSiguiente = c.getTime();
            
            // Si la fecha de la medición está entre las fechas iniciales y finales se prepara para mostrar.
            if (medicion.getFechaHora().getTime() >= dtcFechaInicial.getDate().getTime() &&
                medicion.getFechaHora().getTime() < diaSiguiente.getTime()) {
                // Se añade al búffer medicionesActuales para entregárselo a la gráfica.
                medicionesActuales.add(medicion);
                // El dato se añade también a la tabla.
                Object[] row = { medicion.getFechaHora().toLocalDateTime().format(DateTimeFormatter.ofPattern("dd/MM/yy HH:mm")),
                                 medicion.getVientoVelocidadMedia(),
                                 medicion.getVientoVelocidadMaxima(),
                                 medicion.getVientoDireccion(),
                                 medicion.getPrecipitacion(),
                                 medicion.getHumedadRelativa(),
                                 medicion.getPresionBarometrica(),
                                 medicion.getInsolacion(),
                                 medicion.getTemperaturaMedia(),
                                 medicion.getTemperaturaMaxima(),
                                 medicion.getTemperaturaMinima(),
                                 medicion.getNieveGrosor() };
                modeloTabla.addRow(row);
                // Se llena el array auxiliar para cargar después el combo box sin duplicados.
                if(medicion.getVientoVelocidadMedia() != null)
                    datosTabla[0] = true;
                if(medicion.getVientoVelocidadMaxima() != null)
                    datosTabla[1] = true;
                if(medicion.getVientoDireccion() != null)
                    datosTabla[2] = true;
                if(medicion.getPrecipitacion() != null)
                    datosTabla[3] = true;
                if(medicion.getHumedadRelativa() != null)
                    datosTabla[4] = true;
                if(medicion.getPresionBarometrica() != null)
                    datosTabla[5] = true;
                if(medicion.getInsolacion()!= null)
                    datosTabla[6] = true;
                if(medicion.getTemperaturaMedia() != null)
                    datosTabla[7] = true;
                if(medicion.getTemperaturaMaxima() != null)
                    datosTabla[8] = true;
                if(medicion.getTemperaturaMinima() != null)
                    datosTabla[9] = true;
                if(medicion.getNieveGrosor() != null)
                    datosTabla[10] = true;
            }
        }
        // Vaciado del combo box de la gráfica.
        cmbDatosGrafica.removeAllItems();
        // Primer elemento. Decorativo.
        cmbDatosGrafica.addItem("Seleccione los datos a visualizar...");
        // Se añaden elementos según el array auxiliar, significando que existen datos
        // de esa lectura.
        if(datosTabla[0])
            cmbDatosGrafica.addItem("Velocidad media del viento");
        if(datosTabla[1])
            cmbDatosGrafica.addItem("Velocidad máxima del viento");
        if(datosTabla[2])
            cmbDatosGrafica.addItem("Dirección del viento");
        if(datosTabla[3])
            cmbDatosGrafica.addItem("Nivel de precipitación");
        if(datosTabla[4])
            cmbDatosGrafica.addItem("Humedad relativa");
        if(datosTabla[5])
            cmbDatosGrafica.addItem("Presión barométrica");
        if(datosTabla[6])
            cmbDatosGrafica.addItem("Nivel de insolación");
        if(datosTabla[7])
            cmbDatosGrafica.addItem("Temperatura media");
        if(datosTabla[8])
            cmbDatosGrafica.addItem("Temperatura máxima");
        if(datosTabla[9])
            cmbDatosGrafica.addItem("Temperatura mínima");
        if(datosTabla[10])
            cmbDatosGrafica.addItem("Grosor de capa de nieve");
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void cmbDatosGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDatosGraficaActionPerformed
        // Se crea una nueva gráfica.
        Grafica grafica = new Grafica();
        // Según el dato elegido del combo box se configura la gráfica y se cargan los datos.
        if("Velocidad media del viento".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("m/s");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getVientoVelocidadMedia(), medicion.getLocalDateTime());
            }
        }
        
        if("Velocidad máxima del viento".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("m/s");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getVientoVelocidadMaxima(), medicion.getLocalDateTime());
            }
        }
        
        if("Dirección del viento".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("grados");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getVientoDireccion(), medicion.getLocalDateTime());
            }
        }
        
        if("Nivel de precipitación".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("l/m2");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getPrecipitacion(), medicion.getLocalDateTime());
            }
        }
        
        if("Humedad relativa".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("% humedad");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getHumedadRelativa(), medicion.getLocalDateTime());
            }
        }
        
        if("Presión barométrica".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("hPa");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getPresionBarometrica(), medicion.getLocalDateTime());
            }
        }
        
        if("Nivel de insolación".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("horas");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getInsolacion(), medicion.getLocalDateTime());
            }
        }
        
        if("Temperatura media".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("º C");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getTemperaturaMedia(), medicion.getLocalDateTime());
            }
        }
        
        if("Temperatura máxima".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("º C");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getTemperaturaMaxima(), medicion.getLocalDateTime());
            }
        }
        
        if("Temperatura mínima".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("º C");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getTemperaturaMinima(), medicion.getLocalDateTime());
            }
        }
        
        if("Grosor de capa de nieve".equals((String)cmbDatosGrafica.getSelectedItem())) {
            grafica.setTituloEjeY("mm");
            for(Medicion medicion: medicionesActuales) {
                grafica.insertarDato(medicion.getNieveGrosor(), medicion.getLocalDateTime());
            }
        }
        
        // Una vez configurada dicha gráfica se presenta, sólo si el índice del combo box es
        // diferente a 0, eso es, sí se ha elegido una lectura.
        if(cmbDatosGrafica.getSelectedIndex() != 0) {
            panelContenedorGrafica.removeAll();
            panelContenedorGrafica.add(grafica.getPanel());
            panelContenedorGrafica.validate();
        }
    }//GEN-LAST:event_cmbDatosGraficaActionPerformed

    // Los siguientes métodos están realizados para acotar el rango elegible de los elementos calendario:
    // Para que el elemento fecha inicial no vaya mas atrás de la fecha de la primera lectura que se tenga
    // ni mas alante que la fecha final
    private void dtcFechaInicialDateEditorPropertyChange(java.beans.PropertyChangeEvent evt) {
        // Se mira si el cambio se ha producido en la propiedad fecha.
        if("date".equals(evt.getPropertyName())) {
            // Si la fecha enegida es nula se le da la mas antigua.
            if(evt.getNewValue() == null) {
                dtcFechaInicial.setDate(obtenerFechaInicial());
            }
            else {
                // Si la fecha final aún no se ha establecido, ocurre cuando 
                // se cambian las medidas, se extiende el rango hasta fecha final.
                if (dtcFechaFinal.getDate() == null) {
                    dtcFechaInicial.setMaxSelectableDate(obtenerFechaFinal());
                }
                else {
                    // Si por alguna razón el usuario consigue elegir una fecha posterior
                    // a la fecha final, se le hace regresar a la fecha que tenía anteriormente.
                    if (((Date)evt.getNewValue()).after(dtcFechaFinal.getDate())) {
                        dtcFechaInicial.setDate((Date)evt.getOldValue());
                    }
                    else {
                        // Si el cambio se ha realizado satisfactoriamente se pone como inicio
                        // de rango de fecha final la fecha inicial, así se impedirá que fecha final
                        // pueda elegirse una fecha anterior a la inicial.
                        dtcFechaFinal.setMinSelectableDate((Date)evt.getNewValue());
                    }
                }
            }
        }
    }
    
    private void dtcFechaFinalDateEditorPropertyChange(java.beans.PropertyChangeEvent evt) {
        if("date".equals(evt.getPropertyName())) {
            // Si no hay elegida una fecha final se pone la mas antigua
            if(evt.getNewValue() == null) {
                dtcFechaFinal.setDate(obtenerFechaFinal());
            }
            else {
                // Si fecha final elegida es más antigua que fecha inicial se devuelve a la anterior.
                if (((Date)evt.getNewValue()).before(dtcFechaInicial.getDate())) {
                    dtcFechaFinal.setDate((Date)evt.getOldValue());
                }
                else {
                    // Si ha habido éxito en el cambio de fecha se situa el rango de fecha inicial
                    // hasta fecha final para que así el usuario no pueda situar fecha inicial
                    // más allá de la final.
                    dtcFechaInicial.setMaxSelectableDate((Date)evt.getNewValue());
                }
            }
        }
    }
    
    /**
     * Inicializa el FORM de la ventana.
     */
    public static void inicializar() {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JComboBox<String> cmbDatosGrafica;
    private javax.swing.JComboBox<String> cmbEstacion;
    private javax.swing.JComboBox<String> cmbProvincia;
    private com.toedter.calendar.JDateChooser dtcFechaFinal;
    private com.toedter.calendar.JDateChooser dtcFechaInicial;
    private javax.swing.JLabel lblDatosGrafica;
    private javax.swing.JLabel lblEstacion;
    private javax.swing.JLabel lblFechaFinal;
    private javax.swing.JLabel lblFechaInicial;
    private javax.swing.JLabel lblProvincia;
    private javax.swing.JPanel panelContenedorGrafica;
    private javax.swing.JPanel panelGrafica;
    private javax.swing.JScrollPane panelScroll;
    private javax.swing.JPanel panelSeleccion;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JTabbedPane panelTabla;
    private javax.swing.JTable tablaResultados;
    // End of variables declaration//GEN-END:variables
}
